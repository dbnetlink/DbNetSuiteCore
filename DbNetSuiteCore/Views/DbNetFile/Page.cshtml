@using DbNetSuiteCore.Enums.DbNetFile;
@using DbNetSuiteCore.Helpers;
@using DbNetSuiteCore.Models.DbNetFile;
@using DbNetSuiteCore.ViewModels.DbNetCombo;
@using System.Data
@using DbNetSuiteCore.ViewModels.DbNetFile;
@using Microsoft.AspNetCore.Html;
@using System.Text.Json;
@using DbNetSuiteCore.Extensions;
@using DbNetSuiteCore.Constants.DbNetFile;

@model FileViewModel

@{
    int rowIdx = 0;
}
<table class="dbnetfile-table">
    @if (string.IsNullOrEmpty(Model.Caption) == false)
    {
        <caption>@Model.Caption</caption>
    }
    <colgroup>
        <col />
        @foreach (FileColumn fileColumn in Model.FilteredColumns)
        {
            <col column-type="@fileColumn.Type" />
        }
    </colgroup>
    <thead>
        @if (Model.Nested == false && Model.IsSearchResults == false && string.IsNullOrEmpty(Model.Folder) == false)
        {
            <tr class="path-row">
                <td colspan="@(Model.FilteredColumns.Count()+1)">
                    <div class="current-path">@CurrentPath()</div>
                </td>
            </tr>
        }
        <tr class="header-row">
            <th>&nbsp;</th>
            @foreach (FileColumn fileColumn in Model.FilteredColumns)
            {
                <th data-type="@fileColumn.Type" orderby=@fileColumn.OrderBy class="@HeaderCellClass(fileColumn)">@(fileColumn.Label)</th>
            }
        </tr>
    </thead>
    @foreach (DataRowView dataRow in Model.DataView)
    {
        rowIdx++;

        if (rowIdx >= Model.FirstRow && rowIdx <= Model.LastRow)
        {
            <tr class="data-row @(rowIdx % 2 == 0 ? "even" : "odd")">
                <td class="@IconClass(dataRow)" data-folder="@NestedFolderPath(dataRow)">&nbsp;</td>
                @foreach (FileColumn fileColumn in Model.FilteredColumns)
                {
                    if (dataRow.IsDirectory())
                    {
                        <td>@CellContent(dataRow,fileColumn)</td>
                    }
                    else
                    {
                        <td column-type="@fileColumn.Type">@CellContent(dataRow,fileColumn)</td>
                    }
                }
            </tr>
        }
    }
</table>

@functions
{
    public HtmlString CellContent(DataRowView dataRow, FileColumn fileColumn)
    {
        string html = string.Empty;
        object value = "&nbsp;";

        if (dataRow.Row.Table.Columns.Contains(fileColumn.Type.ToString()))
        {
            value = dataRow[fileColumn.Type.ToString()] ?? "&nbsp;";
        }
        switch (fileColumn.Type)
        {
            case FileInfoProperties.Name:
                if (dataRow.IsDirectory())
                {
                    if (Model.IsSearchResults)
                    {
                        html = FolderLink($"{dataRow.ParentFolder()}/{value.ToString()}");
                    }
                    else
                    {
                        html = FolderLink($"{Model.Folder}/{value.ToString()}");
                    }
                }
                else
                {
                    html = FileLink(value.ToString(), dataRow.Extension());
                }
                break;
            case FileInfoProperties.ParentFolder:
                html = FolderLink($"{value.ToString()}");
                break;
            case FileInfoProperties.Length:
                if (dataRow.IsDirectory() == false)
                {
                    html = FileSizeExtension.ToFileSizeUnit(Convert.ToInt64(value));
                }
                break;
            case FileInfoProperties.LastModified:
            case FileInfoProperties.Created:
            case FileInfoProperties.LastAccessed:
                if (value is DateTimeOffset)
                {
                    value = ((DateTimeOffset)value).UtcDateTime;
                }
                if (dataRow.IsDirectory() == false)
                {
                    if (string.IsNullOrEmpty(fileColumn.Format))
                    {
                        html = $"{Convert.ToDateTime(value).ToString("d")} {Convert.ToDateTime(value).ToString("t")}";
                    }
                    else
                    {
                        html = Convert.ToDateTime(value).ToString(fileColumn.Format);
                    }
                }
                break;
            default:
                if (dataRow.IsDirectory() == false)
                {
                    html = value.ToString();
                }
                break;
        }
        return new HtmlString(html);
    }

    public string IconClass(DataRowView dataRow)
    {
        List<string> classes = new List<string>() { "icon-cell" };
        if (dataRow.IsDirectory())
        {
            classes.Add("folder");
        }
        else
        {
            classes.Add("file");
            classes.Add(GetFileType(dataRow.FileName().ToLower()).ToString().ToLower());
        }

        return string.Join(" ", classes);
    }

    public string NestedFolderPath(DataRowView dataRow)
    {
        List<string> classes = new List<string>() { "icon-cell" };
        if (dataRow.IsDirectory())
        {
            return EncodingHelper.Encode($"{Model.Folder}/{dataRow.FileName()}");
        }

        return null;
    }

    public HtmlString CurrentPath()
    {
        List<string> folders = Model.Folder.Split("/").ToList();
        List<string> rootFolders = Model.RootFolder.Split("/").ToList();
        string separator = "<span class=\"folder-separator\">/</span>";
        string html = separator;
        string currentFolder = string.Join("/",rootFolders.Take(rootFolders.Count - 1));
        var folderCount = folders.Count;
        for (var f = rootFolders.Count-1; f < folderCount; f++)
        {
            var lastFolder = f == folderCount - 1;
            var folder = folders[f];
            currentFolder += $"/{folder}";
            html += $"<span class=\"folder-name{(lastFolder ? " last" : string.Empty)}\">{((f == 0 || lastFolder) ? folder : FolderLink(currentFolder))}</span>{separator}";
        }

        return new HtmlString(html);
    }

    public string FolderLink(string folder)
    {
        return $"<a class=\"folder-link\" data-folder=\"{EncodingHelper.Encode(folder)}\" title=\"{folder.Replace(Model.RootFolder, string.Empty)}\" href=\"#\">{folder.Split("/").Last()}</a>";
    }

    public FileType GetFileType(string fileName)
    {
        FileType fileType = FileType.Download;
        string ext = fileName.Split(".").Last();

        foreach (FileType key in Extensions.FileTypeExtensions.Keys)
        {
            if (Extensions.FileTypeExtensions[key].Contains(ext))
            {
                fileType = key;
                break;
            }
        }

        return fileType;
    }

    public string FileLink(string fileName, string extension)
    {
        FileType fileType = GetFileType(fileName);

        string mimeType = TextHelper.GetMimeTypeForFileExtension(extension);

        return $"<a class=\"file-link\" data-filetype=\"{fileType}\" data-file=\"{EncodingHelper.Encode(fileName)}\" data-mimetype=\"{mimeType}\" href=\"#\">{fileName}</a>";
    }

    public string HeaderCellClass(FileColumn column)
    {
        List<string> classNames = new List<string>();
        /*
        if (Model.FrozenHeader)
        {
            classNames.Add("sticky");
        }
        */
        if (classNames.Any())
        {
            return string.Join(" ", classNames.ToArray());
        }

        return null;
    }
}