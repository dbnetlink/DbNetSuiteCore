@using DbNetSuiteCore.Enums.DbNetFile;
@using DbNetSuiteCore.Helpers;
@using DbNetSuiteCore.Models.DbNetFile;
@using DbNetSuiteCore.ViewModels.DbNetCombo;
@using System.Data
@using DbNetSuiteCore.ViewModels.DbNetFile;
@using Microsoft.AspNetCore.Html;
@using System.Text.Json;
@using DbNetSuiteCore.Extensions;
@model FileViewModel

@{
    int rowIdx = 0;
}
<table class="dbnetfile-table">
    @if (string.IsNullOrEmpty(Model.Caption) == false)
    {
        <caption>@Model.Caption</caption>
    }
    <colgroup>
        <col />
        @foreach (FileColumn fileColumn in Model.Columns)
        {
            <col column-type="@fileColumn.Type" />
        }
    </colgroup>
    <thead>
        @if (Model.Nested == false)
        {
            <tr class="path-row">
                <td colspan="@(Model.Columns.Count()+1)">
                    <div class="current-path">@CurrentPath()</div>
                </td>
            </tr>
        }
        <tr class="header-row">
            <th>&nbsp;</th>
            @foreach (FileColumn fileColumn in Model.Columns)
            {
                <th>@(fileColumn.Label)</th>
            }
        </tr>
    </thead>
    @foreach (DataRowView dataRow in Model.DataView)
    {
        rowIdx++;

        if (rowIdx >= Model.FirstRow && rowIdx <= Model.LastRow)
        {
            <tr class="data-row @(rowIdx % 2 == 0 ? "even" : "odd")">
                <td class="@IconClass(dataRow)" data-folder="@NestedFolderPath(dataRow)">&nbsp;</td>
                @foreach (FileColumn fileColumn in Model.Columns)
                {
                    <td column-type="@fileColumn.Type">@CellContent(dataRow,fileColumn)</td>
                }
            </tr>
        }
    }
</table>

@functions
{
    public HtmlString CellContent(DataRowView dataRow, FileColumn fileColumn)
    {
        string html = string.Empty;
        object value = dataRow[fileColumn.Type.ToString()] ?? "&nbsp;";
        switch (fileColumn.Type)
        {
            case FileInfoProperties.Name:
                if (Convert.ToBoolean(dataRow[FileInfoProperties.IsDirectory.ToString()]))
                {
                    html = FolderLink($"{Model.Folder}/{value.ToString()}");
                }
                else
                {
                    html = value.ToString();
                }
                break;
            case FileInfoProperties.Length:
                if (Convert.ToBoolean(dataRow[FileInfoProperties.IsDirectory.ToString()]) == false)
                {
                    html = FileSizeExtension.ToFileSizeUnit(Convert.ToInt64(value));
                }
                break;
            default:
                if (Convert.ToBoolean(dataRow[FileInfoProperties.IsDirectory.ToString()]) == false)
                {
                    html = value.ToString();
                }
                break;
        }
        return new HtmlString(html);
    }

    public string IconClass(DataRowView dataRow)
    {
        List<string> classes = new List<string>() { "icon-cell" };
        if (Convert.ToBoolean(dataRow[FileInfoProperties.IsDirectory.ToString()]))
        {
            classes.Add("folder");
        }

        return string.Join(" ", classes);
    }

    public string NestedFolderPath(DataRowView dataRow)
    {
        List<string> classes = new List<string>() { "icon-cell" };
        if (Convert.ToBoolean(dataRow[FileInfoProperties.IsDirectory.ToString()]))
        {
            return EncodingHelper.Encode($"{Model.Folder}/{dataRow[FileInfoProperties.Name.ToString()]}");
        }

        return null;
    }

    public HtmlString CurrentPath()
    {
        List<string> folders = Model.Folder.Split("/").ToList();
        string separator = "<span class=\"folder-separator\">/</span>";
        string html = separator;
        string currentFolder = string.Empty;
        foreach (string folder in folders.Skip(1))
        {
            currentFolder += $"/{folder}";
            html += $"<span class=\"folder-name\">{((currentFolder.Length < Model.RootFolder.Length) ? folder : FolderLink(currentFolder))}</span>{separator}";
        }

        return new HtmlString(html);
    }

    public string FolderLink(string folder)
    {
        return $"<a class=\"folder-link\" data-folder=\"{EncodingHelper.Encode(folder)}\" href=\"javascript:void()\">{folder.Split("/").Last()}</a>";
    }
}
