@namespace DbNetSuiteCore.Views.DbNetEdit
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models.DbNetEdit
@using DbNetSuiteCore.ViewModels.DbNetEdit
@using DbNetSuiteCore.Models
@using System.Data
@using System.Linq
@using Microsoft.AspNetCore.Html
@using System.Text;
@using DbNetSuiteCore.Extensions
@model FormViewModel

@{
    DataRow row = Model.EditData.Rows[0];
}

<table class="dbnetedit-form">
    <tbody>
        @foreach (DataColumn dataColumn in Model.EditData.Columns)
        {
            EditColumn editColumn = Model.Columns[dataColumn.Ordinal];
            if (editColumn.Display == false)
            {
                continue;
            }
            <tr class="form-row">
                <td class="label">@(editColumn.Label)</td>
                <td>@FormControl(editColumn,dataColumn)</td>
            </tr>
        }
    </tbody>
</table>
<div>
    <div class="message">&nbsp;</div>
</div>
@functions
{
    public string Attributes(EditColumn editColumn, DataColumn dataColumn)
    {
        List<string> attributes = new List<string>();
        string inputType = null;
        string disabled = editColumn.PrimaryKey ? "disabled" : string.Empty;
        int size = editColumn.ColumnSize == -1 ? 20 : editColumn.ColumnSize;
  
        switch (editColumn.EditControlType)
        {
            case EditControlType.Auto:
                inputType = "text";
                break;
        }

        if (string.IsNullOrEmpty(inputType) == false)
        {
            attributes.Add($"type=\"{inputType}\"");
        }
        if (string.IsNullOrEmpty(disabled) == false)
        {
            attributes.Add(disabled);
        }
        attributes.Add($"name=\"{dataColumn.ColumnName.ToLower()}\"");
        attributes.Add($"size=\"{size.ToString()}\"");
        return string.Join(" ", attributes.ToArray());
    }
    public HtmlString FormControl(EditColumn editColumn, DataColumn dataColumn)
    {
        string tagName = "input";
        switch(editColumn.EditControlType)
        {
            case EditControlType.TextArea:
                tagName = "textarea";
                break;
        }
        
        return new HtmlString($"<{tagName} {Attributes(editColumn, dataColumn)} class=\"dbnetedit\"></{tagName}>");
    }
}