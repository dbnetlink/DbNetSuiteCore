@namespace DbNetSuiteCore.Views.DbNetEdit
@using DbNetSuiteCore.Enums.DbNetEdit
@using DbNetSuiteCore.Enums;
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models.DbNetEdit
@using DbNetSuiteCore.ViewModels.DbNetEdit
@using DbNetSuiteCore.Models
@using System.Data
@using System.Linq
@using Microsoft.AspNetCore.Html
@using System.Text;
@using DbNetSuiteCore.Extensions
@model FormViewModel

@{
    List<KeyValuePair<EditColumn, DataColumn>> fields = new List<KeyValuePair<EditColumn, DataColumn>>();
    List<KeyValuePair<EditColumn, DataColumn>> hiddenFields = new List<KeyValuePair<EditColumn, DataColumn>>();
    @foreach (DataColumn dataColumn in Model.DataColumns)
    {
        EditColumn editColumn = Model.EditColumns[dataColumn.Ordinal];
        if (editColumn.Hidden)
        {
            hiddenFields.Add(new KeyValuePair<EditColumn, DataColumn>(editColumn, dataColumn));
            continue;
        }
        fields.Add(new KeyValuePair<EditColumn, DataColumn>(editColumn, dataColumn));
    }

    int remainder = fields.Count % Model.LayoutColumns;
    int rows = Math.Abs(fields.Count / Model.LayoutColumns) + (remainder == 0 ? 0 : 1);
}
@if (Model.ToolbarPosition == Enums.ToolbarPosition.Top)
{
    <div class="toolbar-container"></div>
    <hr class="toolbar" />
}
<table class="dbnetedit-form">
    <tbody>
        @for (int r = 0; r < rows; r++)
        {
            <tr class="form-row">
                @for (int c = 1; c <= Model.LayoutColumns; c++)
                {
                    int i = r + ((c - 1) * rows);
                    if (i < fields.Count)
                    {
                        EditColumn editColumn = fields[i].Key;
                        DataColumn dataColumn = fields[i].Value;
                        <td class="label">@(editColumn.Label)</td>
                        if (editColumn.Binary)
                        {
                            <td class="control">@BinaryControl(editColumn,dataColumn)</td>
                        }
                        else
                        {
                            <td class="control">@FormControl(editColumn,dataColumn)</td>
                        }
                    }
                }
                @if (remainder > 0)
                {
                    for (int i = 0; i < Model.LayoutColumns - remainder; i++)
                    {
                        <td colspan="2"></td>
                    }
                }
            </tr>
            @if (hiddenFields.Any())
            {
                <tr style="display:none">
                    <td colspan="@(Model.LayoutColumns*2)">
                        @foreach (var hiddenField in hiddenFields)
                        {
                            EditColumn editColumn = hiddenField.Key;
                            DataColumn dataColumn = hiddenField.Value;
                            @FormControl(editColumn,dataColumn)
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@if (Model.ToolbarPosition != Enums.ToolbarPosition.Top)
{
    <hr class="toolbar" />
    <div class="toolbar-container"></div>
}
<div>
    <div class="message">&nbsp;</div>
</div>
@functions
{
        public HtmlString FormControl(EditColumn editColumn, DataColumn dataColumn)
        {
            if (string.IsNullOrEmpty(editColumn.Lookup) == false)
            {
                switch (editColumn.EditControlType)
                {
                    case EditControlType.SuggestLookup:
                        if (editColumn.LookupColumns == 1)
                        {
                            return DataListLookup(editColumn, dataColumn);
                        }
                        break;
                    case EditControlType.DropDownList:
                        return new HtmlString($"<select {string.Join(" ", Attributes(editColumn, dataColumn))} >{LookupOptions(Model.LookupTables[editColumn.ColumnName])}</select>");
                }
            }

            string tagName = "input";
            switch (editColumn.EditControlType)
            {
                case EditControlType.TextArea:
                    tagName = "textarea";
                    break;
            }

            string button = string.Empty;

            if (editColumn.DataType.Equals(nameof(DateTime)))
            {
                button = AddButton("calendar", "SelectDate");
            }
            else if (editColumn.DataType.Equals(nameof(TimeSpan)))
            {
                button = AddButton("clock", "SelectTime");
            }
            else if (string.IsNullOrEmpty(editColumn.Lookup) == false)
            {
                button = AddButton("lookup", "OpenTheLookupWindow");
            }

            return new HtmlString($"<{tagName} {string.Join(" ", Attributes(editColumn, dataColumn, editColumn.ColumnSize))}></{tagName}>{button}");
        }

        public HtmlString BinaryControl(EditColumn editColumn, DataColumn dataColumn)
        {
            string tagName = editColumn.IsImageExtension ? "img" : "a";

            string uploadButton = AddButton("upload", "Upload");
            string deleteButton = AddButton("delete", "Delete");

            string className = tagName == "img" ? " class=\"icon-container\"" : string.Empty;

            return new HtmlString($"<div class=\"flex-container\"><div{className}><{tagName} {string.Join(" ", Attributes(editColumn, dataColumn, editColumn.ColumnSize))}></{tagName}></div><div>{uploadButton}</div><div>{deleteButton}</div></div>");
        }

        private HtmlString DataListLookup(EditColumn editColumn, DataColumn dataColumn)
        {
            var attributes = Attributes(editColumn, dataColumn);
            string id = $"{Model.ComponentId}_{editColumn.ColumnName}";
            attributes.Add($"list=\"{id}\"");
            string datalist = $"<input {string.Join(" ", attributes)}></input><datalist id=\"{id}\">{LookupOptions(Model.LookupTables[editColumn.ColumnName])}</datalist>";
            return new HtmlString(datalist);
        }

        private string AddButton(string type, string title)
        {
            string button = $"<button type=\"button\" class=\"toolbar-button toolbar-button-image\" title=\"{Model.Translate(title)}\" button-type=\"{type.ToLower()}\" id=\"{Model.ComponentId}_{type}Btn\"></button>";
            return button;
        }

        public List<string> Attributes(EditColumn editColumn, DataColumn dataColumn, int size = 0)
        {
            List<string> attributes = new List<string>();
            List<string> classNames = new List<string>() { "dbnetedit" };

            string inputType = null;
            string disabled = editColumn.PrimaryKey ? "disabled" : string.Empty;

            switch (editColumn.EditControlType)
            {
                case EditControlType.Auto:
                    inputType = "text";
                    break;
                case EditControlType.CheckBox:
                    inputType = "checkbox";
                    break;
            }

            if (editColumn.Binary && string.IsNullOrEmpty(editColumn.Extension) == false)
            {
                var extensions = editColumn.Extension.Split(",").Select(c => $".{c.Split('|').First()}").ToList();
                attributes.Add($"extensions=\"{string.Join(',', extensions.ToList())}\"");

                var mimeTypes = editColumn.Extension.Split(",").Select(c => c.Split("|")[1]).Where(c => String.IsNullOrEmpty(c) == false).ToList();
                extensions.AddRange(mimeTypes);
                attributes.Add($"accept=\"{string.Join(',', extensions.ToList())}\"");
                attributes.Add($"isimage=\"{editColumn.IsImageExtension.ToString().ToLower()}\"");
            }

            if (editColumn.UploadMetaData.HasValue)
            {
                attributes.Add($"uploadmetadata=\"{editColumn.UploadMetaData}\"");
                attributes.Add($"uploadmetadatacolumn=\"{editColumn.UploadMetaDataColumn.ToLower()}\"");
                attributes.Add($"readonly");
            }

            if (string.IsNullOrEmpty(editColumn.Pattern) == false)
            {
                attributes.Add($"pattern=\"{editColumn.Pattern}\"");
            }

            if (string.IsNullOrEmpty(editColumn.Style) == false)
            {
                attributes.Add($"style=\"{editColumn.Style}\"");
            }

            if (editColumn.IsNumeric)
            {
                attributes.Add($"numeric=\"true\"");
            }

            if (editColumn.EditControlType != EditControlType.CheckBox)
            {
                if (editColumn.Required)
                {
                    attributes.Add($"required=\"true\"");
                }
            }

            if (editColumn.ReadOnly)
            {
                switch (editColumn.EditControlType)
                {
                    case EditControlType.DropDownList:
                        classNames.Add("readonly");
                        break;
                    case EditControlType.CheckBox:
                        attributes.Add($"onclick=\"return false;\"");
                        break;
                    default:
                        attributes.Add($"readonly");
                        break;
                }
            }

            if (editColumn.PrimaryKey)
            {
                attributes.Add($"primarykey=\"true\"");
                if (editColumn.AutoIncrement)
                {
                    attributes.Add($"autoincrement=\"true\"");
                }
            }
            if (editColumn.ForeignKey)
            {
                attributes.Add($"foreignkey=\"true\"");
                if (string.IsNullOrEmpty(editColumn.ForeignKeyValue?.ToString()) == false)
                {
                    attributes.Add($"initialvalue=\"{editColumn.ForeignKeyValue}\"");
                }
            }

            if (string.IsNullOrEmpty(inputType) == false)
            {
                attributes.Add($"type=\"{inputType}\"");
            }
            if (string.IsNullOrEmpty(disabled) == false)
            {
                attributes.Add(disabled);
            }
            attributes.Add($"name=\"{dataColumn.ColumnName.ToLower()}\"");

            switch (editColumn.EditControlType)
            {
                case EditControlType.TextBox:
                    if (size > 0)
                    {
                        attributes.Add($"size=\"{size.ToString()}\"");
                    }
                    break;
            }

        switch (editColumn.EditControlType)
        {
            case EditControlType.TextBoxLookup:
                attributes.Add($"readonly");
                break;
        }

        if (string.IsNullOrEmpty(editColumn.Format) == false)
        {
            attributes.Add($"format=\"{editColumn.Format}\"");
        }
        attributes.Add($"dataType=\"{editColumn.DataType}\"");
        attributes.Add($"columnIndex=\"{editColumn.Index}\"");
        attributes.Add($"class=\"{string.Join(" ", classNames)}\"");
        return attributes;
    }

    public string LookupOptions(DataTable data)
    {
        List<string> options = new List<string>();

        int descriptionColumn = data.Columns.Count - 1;
        options.Add($"<option></option>");

        foreach (DataRow row in data.Rows)
        {
            options.Add($"<option value=\"{row[0].ToString()}\">{row[descriptionColumn].ToString()}</option>");
        }

        return string.Join(string.Empty, options.ToArray());
    }

    public string DataListOptions(DataTable data)
    {
        List<string> options = new List<string>();

        int descriptionColumn = data.Columns.Count - 1;
        options.Add($"<option></option>");

        foreach (DataRow row in data.Rows)
        {
            options.Add($"<option value=\"{row[descriptionColumn].ToString()}\"></option>");
        }

        return string.Join(string.Empty, options.ToArray());
    }
}