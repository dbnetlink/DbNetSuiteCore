@namespace DbNetSuiteCore.Views.DbNetEdit
@using DbNetSuiteCore.Enums.DbNetEdit
@using DbNetSuiteCore.Enums;
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models.DbNetEdit
@using DbNetSuiteCore.ViewModels.DbNetEdit
@using DbNetSuiteCore.Models
@using System.Data
@using System.Linq
@using System.Web
@using Microsoft.AspNetCore.Html
@using System.Text;
@using DbNetSuiteCore.Extensions
@model FormViewModel

@{
    List<KeyValuePair<EditColumn, DataColumn>> fields = new List<KeyValuePair<EditColumn, DataColumn>>();
    List<KeyValuePair<EditColumn, DataColumn>> hiddenFields = new List<KeyValuePair<EditColumn, DataColumn>>();
    @foreach (DataColumn dataColumn in Model.DataColumns)
    {
        EditColumn editColumn = Model.EditColumns[dataColumn.Ordinal];
        if (editColumn.Hidden)
        {
            hiddenFields.Add(new KeyValuePair<EditColumn, DataColumn>(editColumn, dataColumn));
            continue;
        }
        fields.Add(new KeyValuePair<EditColumn, DataColumn>(editColumn, dataColumn));
    }

    int remainder = fields.Count % Model.LayoutColumns;
    int rows = Math.Abs(fields.Count / Model.LayoutColumns) + (remainder == 0 ? 0 : 1);
}
@if (Model.ToolbarPosition == Enums.ToolbarPosition.Top)
{
    <div class="toolbar-container"></div>
    <hr class="toolbar" />
}
<form>
    <table class="dbnetedit-form">
        <tbody>
            @for (int r = 0; r < rows; r++)
            {
                <tr class="form-row">
                    @for (int c = 1; c <= Model.LayoutColumns; c++)
                    {
                        int i = r + ((c - 1) * rows);
                        if (i < fields.Count)
                        {
                            int tabIndex = i;
                            EditColumn editColumn = fields[i].Key;
                            DataColumn dataColumn = fields[i].Value;
                            <td class="label">@(editColumn.Label)</td>
                            if (editColumn.Binary)
                            {
                                <td class="control">
                                    @BinaryControl(editColumn,dataColumn)
                                    @Annotation(editColumn)
                                </td>
                            }
                            else
                            {
                                <td class="control">
                                    @FormControl(editColumn,dataColumn, tabIndex)
                                    @Annotation(editColumn)
                                </td>
                            }
                        }
                    }
                    @if (remainder > 0)
                    {
                        for (int i = 0; i < Model.LayoutColumns - remainder; i++)
                        {
                            <td colspan="2"></td>
                        }
                    }
                </tr>
            }
            @if (hiddenFields.Any())
            {
                <tr style="display:none">
                    <td colspan="@(Model.LayoutColumns*2)">
                        @foreach (var hiddenField in hiddenFields)
                        {
                            EditColumn editColumn = hiddenField.Key;
                            DataColumn dataColumn = hiddenField.Value;
                            @FormControl(editColumn,dataColumn)
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>
@if (Model.ToolbarPosition != Enums.ToolbarPosition.Top)
{
    <hr class="toolbar" />
    <div class="toolbar-container"></div>
}
<div>
    <div class="message">&nbsp;</div>
</div>
@functions
{
    public HtmlString FormControl(EditColumn editColumn, DataColumn dataColumn, int tabIndex = -1)
    {
        if (string.IsNullOrEmpty(editColumn.Lookup) == false)
        {
            switch (editColumn.EditControlType)
            {
                case EditControlType.SuggestLookup:
                    if (editColumn.LookupColumns == 1)
                    {
                        return DataListLookup(editColumn, dataColumn);
                    }
                    break;
                case EditControlType.DropDownList:
                    string options = editColumn.IsDependentLookup ? string.Empty : LookupOptions(Model.LookupTables[editColumn.ColumnName]);
                    return new HtmlString($"<select {string.Join(" ", Attributes(editColumn, dataColumn, tabIndex, tabIndex))} >{options}</select>");
            }
        }

        string tagName = "input";
        switch (editColumn.EditControlType)
        {
            case EditControlType.TextArea:
                tagName = "textarea";
                break;
        }

        string button = string.Empty;
        string output = string.Empty;

        if (editColumn.DataType.Equals(nameof(DateTime)) && editColumn.EditControlType == EditControlType.Auto)
        {
            button = AddButton("calendar", "SelectDate");
        }
        else if (string.IsNullOrEmpty(editColumn.Lookup) == false)
        {
            button = AddButton("lookup", "OpenTheLookupWindow");
        }

        switch (editColumn.EditControlType)
        {
            case EditControlType.Range:
                output = $"<input type=\"text\" class=\"range-output\" tabindex=\"-1\" size=\"{(editColumn.InputValidation?.Max ?? 10000).ToString().Length}\" readonly/>";
                break;
            case EditControlType.Color:
                output = $"<input type=\"text\" class=\"color-output\" tabindex=\"-1\" size=\"6\" readonly/>";
                break;
        }

        return new HtmlString($"<{tagName} {string.Join(" ", Attributes(editColumn, dataColumn, editColumn.ColumnSize, tabIndex))}></{tagName}>{button}{output}");
    }

    public HtmlString BinaryControl(EditColumn editColumn, DataColumn dataColumn)
    {
        string tagName = editColumn.IsImageExtension ? "img" : "a";

        string uploadButton = AddButton("upload", "Upload");
        string deleteButton = AddButton("delete", "Delete");

        string className = tagName == "img" ? " class=\"icon-container\"" : string.Empty;

        return new HtmlString($"<div class=\"flex-container\"><div{className}><{tagName} {string.Join(" ", Attributes(editColumn, dataColumn, editColumn.ColumnSize))}></{tagName}></div><div>{uploadButton}</div><div>{deleteButton}</div></div>");
    }

    public HtmlString Annotation(EditColumn editColumn)
    {
        if (string.IsNullOrEmpty(editColumn.Annotation))
        {
            return new HtmlString(string.Empty);
        }

        return new HtmlString($"<div class=\"annotation\">{HttpUtility.HtmlDecode(editColumn.Annotation)}</div>");
    }

    private HtmlString DataListLookup(EditColumn editColumn, DataColumn dataColumn)
    {
        var attributes = Attributes(editColumn, dataColumn);
        string id = $"{Model.ComponentId}_{editColumn.ColumnName}";
        attributes.Add($"list=\"{id}\"");
        string datalist = $"<input {string.Join(" ", attributes)}></input><datalist id=\"{id}\">{LookupOptions(Model.LookupTables[editColumn.ColumnName])}</datalist>";
        return new HtmlString(datalist);
    }

    private string AddButton(string type, string title)
    {
        string button = $"<button type=\"button\" class=\"toolbar-button toolbar-button-image\" title=\"{Model.Translate(title)}\" button-type=\"{type.ToLower()}\" id=\"{Model.ComponentId}_{type}Btn\"></button>";
        return button;
    }

    public List<string> Attributes(EditColumn editColumn, DataColumn dataColumn, int size = 0, int tabIndex = -1)
    {
        List<string> attributes = new List<string>();
        List<string> classNames = new List<string>() { "dbnetedit" };
        List<string> styles = new List<string>();

        string inputType = null;
        string disabled = editColumn.PrimaryKey ? "disabled" : string.Empty;

        switch (editColumn.EditControlType)
        {
            case EditControlType.Auto:
                inputType = "text";
                break;
            case EditControlType.CheckBox:
            case EditControlType.Color:
            case EditControlType.Date:
            case EditControlType.Email:
            case EditControlType.Hidden:
            case EditControlType.Month:
            case EditControlType.Number:
            case EditControlType.Range:
            case EditControlType.Tel:
            case EditControlType.Time:
            case EditControlType.Url:
            case EditControlType.Week:
            case EditControlType.Password:
            case EditControlType.DateTime:
                inputType = editColumn.EditControlTypeName;
                break;
        }

        if (editColumn.Binary && string.IsNullOrEmpty(editColumn.Extension) == false)
        {
            var extensions = editColumn.Extension.Split(",").Select(c => $".{c.Split('|').First()}").ToList();
            attributes.Add($"extensions=\"{string.Join(',', extensions.ToList())}\"");

            var mimeTypes = editColumn.Extension.Split(",").Select(c => c.Split("|")[1]).Where(c => String.IsNullOrEmpty(c) == false).ToList();
            extensions.AddRange(mimeTypes);
            attributes.Add($"accept=\"{string.Join(',', extensions.ToList())}\"");
            attributes.Add($"isimage=\"{editColumn.IsImageExtension.ToString().ToLower()}\"");

            if (editColumn.IsImageExtension)
            {
                styles.Add($"max-height:{Model.MaxImageHeight}px");
            }
        }

        if (editColumn.UploadMetaData.HasValue)
        {
            attributes.Add($"uploadmetadata=\"{editColumn.UploadMetaData}\"");
            attributes.Add($"uploadmetadatacolumn=\"{editColumn.UploadMetaDataColumn.ToLower()}\"");
            attributes.Add($"readonly");
        }

        if (string.IsNullOrEmpty(editColumn.Pattern) == false)
        {
            attributes.Add($"pattern=\"{editColumn.Pattern}\"");
        }

        if (editColumn.DependentLookup != null)
        {
            attributes.Add($"dependentLookup=\"{editColumn.DependentLookup.ColumnName}\"");
        }

        if (editColumn.IsDependentLookup)
        {
            attributes.Add($"isDependentLookup=\"true\"");
        }

        if (string.IsNullOrEmpty(editColumn.Style) == false)
        {
            styles.Add(editColumn.Style);
        }

        if (string.IsNullOrEmpty(editColumn.Placeholder) == false)
        {
            attributes.Add($"placeholder=\"{editColumn.Placeholder}\"");
        }

        if (editColumn.IsNumeric)
        {
            attributes.Add($"numeric=\"true\"");
        }

        if (editColumn.EditControlType != EditControlType.CheckBox)
        {
            if (editColumn.Required)
            {
                attributes.Add($"required=\"true\"");
            }
        }

        if (editColumn.ReadOnly)
        {
            switch (editColumn.EditControlType)
            {
                case EditControlType.DropDownList:
                    classNames.Add("readonly");
                    break;
                case EditControlType.CheckBox:
                    attributes.Add($"onclick=\"return false;\"");
                    break;
                default:
                    attributes.Add($"readonly");
                    break;
            }
        }

        if (editColumn.PrimaryKey)
        {
            attributes.Add($"primarykey=\"true\"");
            if (editColumn.AutoIncrement)
            {
                attributes.Add($"autoincrement=\"true\"");
            }
        }
        if (editColumn.ForeignKey)
        {
            attributes.Add($"foreignkey=\"true\"");
            if (string.IsNullOrEmpty(editColumn.ForeignKeyValue?.ToString()) == false)
            {
                attributes.Add($"initialvalue=\"{editColumn.ForeignKeyValue}\"");
            }
        }

        if (string.IsNullOrEmpty(inputType) == false)
        {
            attributes.Add($"type=\"{inputType}\"");
        }
        if (string.IsNullOrEmpty(disabled) == false)
        {
            attributes.Add(disabled);
        }
        /*
        else
        {
            attributes.Add($"tabIndex=\"{tabIndex}\"");
        }
        */
        attributes.Add($"name=\"{dataColumn.ColumnName.ToLower()}\"");

        switch (editColumn.EditControlType)
        {
            case EditControlType.TextBox:
            case EditControlType.Auto:
            case EditControlType.Tel:
            case EditControlType.Email:
            case EditControlType.Url:
                if (size > 0)
                {
                    attributes.Add($"size=\"{size.ToString()}\"");
                }
                break;
            case EditControlType.Range:
            case EditControlType.Color:
                attributes.Add($"onchange=\"this.nextElementSibling.value=this.value\"");
                break;
        }

        switch (editColumn.EditControlType)
        {
            case EditControlType.TextBoxLookup:
                attributes.Add($"readonly");
                break;
        }

        if (string.IsNullOrEmpty(editColumn.Format) == false)
        {
            attributes.Add($"format=\"{editColumn.Format}\"");
        }
        attributes.Add($"dataType=\"{editColumn.DataType}\"");
        attributes.Add($"columnIndex=\"{editColumn.Index}\"");
        attributes.Add($"class=\"{string.Join(" ", classNames)}\"");

        if (styles.Any())
        {
            attributes.Add($"style=\"{string.Join(";", styles)}\"");
        }

        attributes.AddRange(InputValidationAttributes(editColumn.InputValidation));
        return attributes;
    }

    public List<string> InputValidationAttributes(Components.InputValidation inputValidation)
    {
        List<string> attributes = new List<string>();

        if (inputValidation != null)
        {
            if (inputValidation.Min.HasValue)
            {
                attributes.Add($"min={inputValidation.Min}");
            }
            if (inputValidation.Max.HasValue)
            {
                attributes.Add($"max={inputValidation.Max}");
            }
            if (inputValidation.Step.HasValue)
            {
                attributes.Add($"step={inputValidation.Step}");
            }
            if (inputValidation.MinLength.HasValue)
            {
                attributes.Add($"minlength={inputValidation.MinLength}");
            }
            if (inputValidation.MaxLength.HasValue)
            {
                attributes.Add($"maxlength={inputValidation.MaxLength}");
            }
        }
        return attributes;
    }

    public string LookupOptions(DataTable data)
    {
        List<string> options = new List<string>();

        int descriptionColumn = data.Columns.Count - 1;
        options.Add($"<option></option>");

        foreach (DataRow row in data.Rows)
        {
            options.Add($"<option value=\"{row[0].ToString()}\">{row[descriptionColumn].ToString()}</option>");
        }

        return string.Join(string.Empty, options.ToArray());
    }

    public string DataListOptions(DataTable data)
    {
        List<string> options = new List<string>();

        int descriptionColumn = data.Columns.Count - 1;
        options.Add($"<option></option>");

        foreach (DataRow row in data.Rows)
        {
            options.Add($"<option value=\"{row[descriptionColumn].ToString()}\"></option>");
        }

        return string.Join(string.Empty, options.ToArray());
    }
}