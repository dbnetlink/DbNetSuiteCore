@namespace DbNetSuiteCore.Views.DbNetEdit
@using DbNetSuiteCore.ViewModels.DbNetEdit
@using Microsoft.AspNetCore.Html
@model ToolbarViewModel

<div class="dbnetsuite-toolbar-panel">
    <table class="dbnetsuite-toolbar" id="@(Model.ComponentId)_dbnetedit-toolbar">
        <tbody>
            <tr>
                @if (Model.IsEditDialog)
                {
                    @Button("Previous")
                    @Button("Next")
                    <td style="width:100%">&nbsp;</td>
                    @Button("Apply", false, Enums.ToolbarButtonStyle.ImageAndText)
                    @Button("Cancel", false, Enums.ToolbarButtonStyle.ImageAndText)
                }
                else
                {
                    @if (Model.Search)
                    {
                        @Button("Search", false)
                    }
                    @QuickSearch()
                    @if (Model.Navigation)
                    {
                        @Button("First")
                        @Button("Previous")
                    }
                    @if (Model.Insert)
                    {
                        @Button("Insert", false)
                    }
                    @if (Model.Delete)
                    {
                        @Button("Delete", false)
                    }
                    @NoRecords()
                    @if (Model.Navigation)
                    {
                        @Text("Record")
                        @Input("RowNumber")
                        @Text("Of")
                        @Input("RowCount")
                    }
                    @if (Model.Navigation)
                    {
                        @Button("Next")
                        @Button("Last")
                    }
                    <td style="width:100%"></td>
                    @Button("Apply", false)
                    @Button("Cancel", false)
                }
            </tr>
        </tbody>
    </table>
</div>

@functions
{
    public HtmlString Button(string type, bool navigation = true, Enums.ToolbarButtonStyle? toolbarButtonStyle = null)
    {
        if (toolbarButtonStyle.HasValue == false)
        {
            toolbarButtonStyle = Model.ToolbarButtonStyle;
        }
        return new HtmlString($"<td class=\"{(navigation ? "navigation" : "")}\"><button type=\"button\" class=\"toolbar-button toolbar-button-{toolbarButtonStyle.ToString().ToLower()}\" title=\"{@Title(type)}\" button-type=\"{type.ToLower()}\" id=\"{Model.ComponentId}_{type}Btn\">{(toolbarButtonStyle == Enums.ToolbarButtonStyle.Image ? string.Empty : ResourceString(type))}</button></td>");
    }

    public HtmlString Input(string name)
    {
        return new HtmlString($"<td class=\"navigation\"><input type=\"input\" class=\"toolbar-info\" readonly id=\"{Model.ComponentId}_{name}\" name=\"{name}\"/></td>");
    }

    public HtmlString Text(string text)
    {
        return new HtmlString($"<td class=\"navigation\"><span class=\"toolbar-text\">{ResourceString(text)}</span></td>");
    }

    public HtmlString NoRecords()
    {
        return new HtmlString($"<td id=\"{Model.ComponentId}_no-records-cell\" class=\"no-records\"><span class=\"toolbar-text\">{ResourceString("No_Records_Found")}</span></td>");
    }

    public string Title(string type)
    {
        return ResourceString($"{type}_Title");
    }

    public string ResourceString(string key)
    {
        return Model.ResourceManager.GetString(key) ?? key;
    }

    public HtmlString QuickSearch()
    {
        @if (Model.QuickSearch == false)
        {
            return new HtmlString(string.Empty);
        }
        string id = "QuickSearch";
        return new HtmlString($"<td><input type=\"input\" class=\"toolbar-info\" id=\"{Model.ComponentId}_{id}\" name=\"{id}\" title=\"{@Title(id)}\"/></td>");
    }
}