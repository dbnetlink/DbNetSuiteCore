@namespace DbNetSuiteCore.Views.DbNetEdit
@using DbNetSuiteCore.Enums;
@using DbNetSuiteCore.ViewModels.DbNetEdit
@using Microsoft.AspNetCore.Html
@model ToolbarViewModel

@{
    Dictionary<ToolbarSection, List<HtmlString>> ToolbarSections = new Dictionary<ToolbarSection, List<HtmlString>>();
    bool elementRendered = false;
    foreach (ToolbarSection toolbarSection in Enum.GetValues<ToolbarSection>())
    {
        ToolbarSections.Add(toolbarSection, new List<HtmlString>());
    }

    if (Model.Search)
    {
        ToolbarSections[ToolbarSection.Search].Add(Button("Search", ToolbarSection.Search));
    }
    if (Model.QuickSearch)
    {
        ToolbarSections[ToolbarSection.Search].Add(QuickSearch());
    }
    if (Model.Insert)
    {
        ToolbarSections[ToolbarSection.Edit].Add(Button("Insert", ToolbarSection.Edit));
    }
    if (Model.Delete)
    {
        ToolbarSections[ToolbarSection.Edit].Add(Button("Delete", ToolbarSection.Edit));
    }
    if (Model.Navigation)
    {
        ToolbarSections[ToolbarSection.Navigation].Add(Button("First", ToolbarSection.Navigation));
        ToolbarSections[ToolbarSection.Navigation].Add(Button("Previous", ToolbarSection.Navigation));
    }
    ToolbarSections[ToolbarSection.Navigation].Add(NoRecords());
    if (Model.Navigation)
    {
        ToolbarSections[ToolbarSection.Navigation].Add(Text("Record"));
        ToolbarSections[ToolbarSection.Navigation].Add(Input("RowNumber"));
        ToolbarSections[ToolbarSection.Navigation].Add(Text("Of"));
        ToolbarSections[ToolbarSection.Navigation].Add(Input("RowCount"));
    }
    if (Model.Navigation)
    {
        ToolbarSections[ToolbarSection.Navigation].Add(Button("Next", ToolbarSection.Navigation));
        ToolbarSections[ToolbarSection.Navigation].Add(Button("Last", ToolbarSection.Navigation));
    }
    if (Model.Browse)
    {
        ToolbarSections[ToolbarSection.Navigation].Add(Button("Browse", ToolbarSection.Navigation));
    }
}

<div class="dbnetsuite-toolbar-panel @Model.ToolbarPosition.ToString().ToLower()">
    <table class="dbnetsuite-toolbar" id="@(Model.ComponentId)_dbnetedit-toolbar">
        <tbody>
            <tr>
                @if (Model.ParentControlType.HasValue && Model.ParentChildRelationship == ParentChildRelationship.OneToOne)
                {
                    @Button("Previous", ToolbarSection.Navigation)
                    @Button("Next", ToolbarSection.Navigation)
                    <td class="push-right"></td>
                    @Button("Apply", ToolbarSection.Save, Enums.ToolbarButtonStyle.ImageAndText)
                    @Button("Cancel", ToolbarSection.Save, Enums.ToolbarButtonStyle.ImageAndText)
                }
                else
                {   @foreach (ToolbarSection section in ToolbarSections.Keys)
                    {
                        if (ToolbarSections[section].Any())
                        {
                            if (elementRendered)
                            {
                                <td class="separator">&nbsp;&nbsp;</td>
                            }
                            foreach (HtmlString cell in ToolbarSections[section])
                            {
                                @cell
                                elementRendered = true;
                            }
                        }
                    }
                    <td class="push-right"></td>
                    @Button("Apply", ToolbarSection.Save)
                    @Button("Cancel", ToolbarSection.Save)
                }
            </tr>
        </tbody>
    </table>
</div>

@functions
{
    public HtmlString Button(string type, ToolbarSection toolbarSection, Enums.ToolbarButtonStyle? toolbarButtonStyle = null)
    {
        if (toolbarButtonStyle.HasValue == false)
        {
            toolbarButtonStyle = Model.ToolbarButtonStyle;
        }
        return new HtmlString($"<td class=\"{(toolbarSection == ToolbarSection.Navigation ? "navigation" : "")}\"><button type=\"button\" class=\"toolbar-button toolbar-button-{toolbarButtonStyle.ToString().ToLower()}\" title=\"{@Title(type, toolbarSection)}\" button-type=\"{type.ToLower()}\" id=\"{Model.ComponentId}_{type}Btn\">{(toolbarButtonStyle == Enums.ToolbarButtonStyle.Image ? string.Empty : ResourceString(type))}</button></td>");
    }

    public HtmlString Input(string name)
    {
        return new HtmlString($"<td class=\"navigation\"><input type=\"input\" class=\"toolbar-info\" readonly id=\"{Model.ComponentId}_{name}\" name=\"{name}\"/></td>");
    }

    public HtmlString Text(string text)
    {
        return new HtmlString($"<td class=\"navigation\"><span class=\"toolbar-text\">{ResourceString(text)}</span></td>");
    }

    public HtmlString NoRecords()
    {
        return new HtmlString($"<td id=\"{Model.ComponentId}_no-records-cell\" class=\"no-records\"><span class=\"toolbar-text\">{ResourceString("No_Records_Found")}</span></td>");
    }

    public string Title(string type, ToolbarSection? toolbarSection = null)
    {
        return ResourceString($"{type}{(toolbarSection.HasValue && toolbarSection.Value == ToolbarSection.Navigation ? "Row" : string.Empty)}_tooltip");
    }

    public string ResourceString(string key)
    {
        return Model.ResourceManager.GetString(key) ?? key;
    }

    public HtmlString QuickSearch()
    {
        string id = "QuickSearch";
        return new HtmlString($"<td><input type=\"input\" class=\"toolbar-info\" id=\"{Model.ComponentId}_{id}\" name=\"{id}\" title=\"{@Title(id)}\"/></td>");
    }
}