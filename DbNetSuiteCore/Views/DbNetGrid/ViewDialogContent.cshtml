@namespace DbNetSuiteCore.Views.DbNetGrid
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Helpers
@using DbNetSuiteCore.Models.DbNetGrid;
@using DbNetSuiteCore.ViewModels.DbNetGrid
@using DbNetSuiteCore.Models
@using System.Data
@using System.Linq
@using Microsoft.AspNetCore.Html
@model ViewDialogViewModel

<table class="view-content-table">

    @{
        List<KeyValuePair<GridColumn, DataColumn>> fields = new List<KeyValuePair<GridColumn, DataColumn>>();
        @foreach (DataColumn dataColumn in Model.ViewData.Columns)
        {
            GridColumn gridColumn = Model.Columns.First(c => c.IsMatch(dataColumn.ColumnName));
            if (gridColumn.View == false)
            {
                continue;
            }
            fields.Add(new KeyValuePair<GridColumn, DataColumn>(gridColumn, dataColumn));
        }
        int remainder = fields.Count % Model.LayoutColumns;
        int rows = Math.Abs(fields.Count / Model.LayoutColumns) + (remainder == 0 ? 0 : 1);
        DataRow dataRow = Model.ViewData.Rows[0];
    }
    <tbody>
        @for (int r = 0; r < rows; r++)
        {
            <tr class="view-content-row">
                @for (int c = 1; c <= Model.LayoutColumns; c++)
                {
                    int i = r + ((c - 1) * rows);
                    @if (i < fields.Count)
                    {
                        GridColumn gridColumn = fields[i].Key;
                        DataColumn dataColumn = fields[i].Value;

                        <td class="view-dialog-label">@(gridColumn.Label)</td>
                        <td data-type="@gridColumn.DataType" style="@gridColumn.Style" data-value="@(dataRow.ItemArray[gridColumn.Index])">
                            <div class="view-dialog-value" data-columnname="@dataColumn.ColumnName.ToLower()" data-type="@gridColumn.DataType" data-dbdatatype="@gridColumn.DbDataType">
                                @if (gridColumn.DataType == "Byte[]")
                                {
                                    @BlobControl(dataRow.ItemArray[gridColumn.Index], gridColumn, dataRow)
                                }
                                else
                                {
                                    @CellValue(dataRow.ItemArray[gridColumn.Index], gridColumn)
                                }
                            </div>
                        </td>
                    }
                }
                @if (remainder > 0)
                {
                    for (int i = 0; i < Model.LayoutColumns - remainder; i++)
                    {
                        <td colspan="2"></td>
                    }
                }
            </tr>
        }
    </tbody>
</table>
@functions
{
    public HtmlString BlobControl(object dataValue, GridColumn gridColumn, DataRow row)
    {
        var size = (dataValue?.ToString() ?? string.Empty).Replace("0", string.Empty);
        if (size == string.Empty)
        {
            return new HtmlString(string.Empty);
        }
        if (gridColumn.Download)
        {
            return new HtmlString(GetFileNameDownload(gridColumn, row));
        }
        else
        {
            string fileName = GetFileName(gridColumn, row);
            return new HtmlString($"<img class=\"image\" data-filename=\"{fileName}\" data-extension=\"{gridColumn.Extension}\" style=\"max-height:{Model.MaxImageHeight}px\"/>");
        }
    }

    public string GetFileNameDownload(GridColumn gridColumn, DataRow row)
    {
        string fileName = GetFileName(gridColumn, row);

        if (fileName != null)
        {
            return $"<a class=\"download\" href=\"javascript:void(0)\" data-filename=\"{fileName}\">{fileName}</a>";
        }

        return $"<button type=\"button\" class=\"download\" data-extension=\"{gridColumn.Extension}\" data-filename=\"{Guid.NewGuid()}.{gridColumn.Extension}\">&nbsp;</button>";
    }

    private string GetFileName(GridColumn gridColumn, DataRow row)
    {
        string fileName = null;
        GridColumn fileNameColumn = Model.Columns.FirstOrDefault(c => c.UploadMetaDataColumn?.ToLower() == gridColumn.ColumnName.ToLower() && c.UploadMetaData == FileMetaData.FileName);

        if (fileNameColumn != null)
        {
            fileName = row.ItemArray[fileNameColumn.Index].ToString();
        }

        return fileName;
    }

    public HtmlString CellValue(object dataValue, GridColumn column)
    {
        if (dataValue == null || dataValue == System.DBNull.Value)
        {
            return new HtmlString("&nbsp;");
        }

        if (string.IsNullOrEmpty(column.Lookup) == false && column.LookupColumns > 1)
        {
            DataTable lookupTable = Model.LookupTables[column.ColumnKey];
            foreach (DataRow row in lookupTable.Rows)
            {
                if (row[0].ToString() == dataValue.ToString())
                {
                    return new HtmlString(row[1].ToString());
                }
            }
        }

        if (column.DataType == nameof(DateTime))
        {
            return new HtmlString(Convert.ToDateTime(dataValue).ToString(column.Format));
        }

         if (column.DataType == nameof(Boolean))
        {
            return new HtmlString($"<input class=\"boolean-value\" type=\"checkbox\" {BooleanHelper.Checked(dataValue.ToString())} onclick=\"return false;\"></input>");
            switch (Model.BooleanDisplayMode)
            {
                case BooleanDisplayMode.Checkbox:
                    return new HtmlString("&nbsp;");
                case BooleanDisplayMode.YesNo:
                    return new HtmlString(BooleanHelper.YesNo(dataValue.ToString()));
            }
        }

        if (column.IsNumeric)
        {
            return new HtmlString(Convert.ToDecimal(dataValue).ToString(column.Format));
        }

        return new HtmlString(dataValue.ToString());
    }

    public static int PrimaryKeyIndex(DataColumnCollection columns, List<GridColumn> gridColumns)
    {
        foreach (DataColumn column in columns)
        {
            GridColumn gridColumn = gridColumns.First(c => c.IsMatch(column.ColumnName));
            if (gridColumn.PrimaryKey)
            {
                return gridColumn.Index;
            }
        }
        return -1;
    }
}
