@page
@using DbNetSuiteCore.Components;
@using DbNetSuiteCore.Enums.DbNetGrid;
@using DbNetSuiteCore.Enums;
@using DbNetSuiteCore.Utilities
@using DbNetSuiteCore.Web.UI.Pages.Samples.DbNetGrid;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BrowseDbModel

<table class="selection-table">
    <tr>
        <td>
            <b>Connections</b>
        </td>
        <td>
            <select class="form-select" id="connection-select">
                @foreach (string connection in Model.Connections.Keys)
                {
                    <option value="@connection" data-databasetype="@Model.Connections[connection]">@connection</option>
                }
            </select>
        </td>
        <td>&nbsp;Database Type&nbsp;</td>
        <td>
            <select class="form-select" id="databasetype-select">
                @foreach (DatabaseType databaseType in Enum.GetValues(typeof(DatabaseType)))
                {
                    <option value="@databaseType">@databaseType</option>
                }
            </select>
        </td>
        <td>&nbsp;</td>
        <td>
            <b>Tables</b>
        </td>
        <td>
            <select class="form-select" id="table-select">
                <option value="">Select a table ...</option>
                @foreach (DbObject schema in Model.Tables)
                {
                    <option value="@schema.QualifiedTableName">@schema.TableName</option>
                }
            </select>
        </td>

        @if (Model.Views.Count > 0)
        {
            <td>&nbsp;</td>
            <td>
                <b>Views</b>
            </td>
            <td>
                <select class="form-select" id="view-select">
                    <option value="">Select a view ...</option>
                    @foreach (DbObject schema in Model.Views)
                    {
                        <option value="@schema.QualifiedTableName">@schema.TableName</option>
                    }
                </select>
            </td>
        }
    </tr>
</table>

@if (string.IsNullOrEmpty(Model.ErrorMessage) == false)
{
    <div>@Model.ErrorMessage</div>
}
<hr />
@{
    @if (String.IsNullOrEmpty(Model.ErrorMessage))
    {
        DbNetGridCore grid = new DbNetGridCore(Model.Db, Model.DatabaseType.Value, Model.FromPart)
                {
                    OptimizeForLargeDataset = true,
                    QuickSearch = true,
                    View = true,
                    ToolbarButtonStyle = ToolbarButtonStyle.ImageAndText,
                    Update = Model.IsTable
                };
        grid.Column("*").Filter().View().Style("{white-space:nowrap}");
    @grid.Render()
    }


}
<script src="https://code.jquery.com/jquery-3.7.0.min.js"
        integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
        crossorigin="anonymous"></script>
<script type="text/javascript">
    var db = "@Model.Db"
    var table = "@Model.Table"
    var databaseType = "@Model.DatabaseType"
    var view = "@Model.View"
    var views = "@Model.Views.Count"

    $(document).ready(init);

    function init() {
        $('#connection-select').val(db).change(function (event) { setDatabaseType(); reloadPage(true); });
        setDatabaseType(databaseType);
        $('#databasetype-select').change(function (event) { reloadPage(true) });

        $('#table-select').val(table).change(function () {
            $('#view-select').prop("selectedIndex", 0);
            reloadPage(false);
        });
        $('#view-select').val(view).change(function () {
            $('#table-select').prop("selectedIndex", 0);
            reloadPage(false);
        });
    }

    function setDatabaseType(databaseType) {
        if (!databaseType) {
            databaseType = $('#connection-select').find(":selected").data('databasetype');
        }
        $('#databasetype-select').val(databaseType);
    }

    function reloadPage(dbChange) {
        var db = $('#connection-select').val();
        var databaseType = $('#databasetype-select').val();

        var table = dbChange ? '' : $('#table-select').val();
        var view = dbChange || views == 0 ? '' : $('#view-select').val();

        window.location.href = window.location.href.replace(/[\?#].*|$/, "?db=" + db + "&table=" + table + "&view=" + view + "&databasetype=" + databaseType);
    }
</script>
